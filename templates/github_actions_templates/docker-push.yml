name: "Container Build"

on: 
  push:
    branches:
        dev

jobs:
    build-container:
        name: Build and Push Container
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Configure AWS Credentials
              id: aws-credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ env.aws-terraform-role }}
                aws-region: us-east-2
                output-credentials: true
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            - name: Build Docker Container
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: ${{ env.container-repository}}
                DOCKERFILE_DIR : ${{ env.dockerfile-path }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f /Dockerfile .
            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: ${{ env.container-repository}}
                DOCKERFILE_DIR : ${{ env.dockerfile-path }}
                IMAGE_TAG: ${{ github.sha }}
              with:
                image-ref: $REGISTRY/$REPOSITORY:$IMAGE_TAG
                format: 'table'
                exit-code: '1'
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'CRITICAL,HIGH'
            - name: Push Docker Container
              env:
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: ${{ env.container-repository}}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
